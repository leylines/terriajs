import CatalogMemberTraits from "./CatalogMemberTraits";
import MappableTraits from "./MappableTraits";
import mixTraits from "../mixTraits";
import primitiveTrait from "../Decorators/primitiveTrait";
import UrlTraits from "./UrlTraits";
import { traitClass } from "../Trait";

@traitClass({
  description: `Creates a Cesium terrain item in the catalog from url.`,
  example: {
    type: "cesium-terrain",
    description:
      "This product is a terrain, it provides a representation of the earth's surface with which to apply data in Digital Twin Victoria. The terrain has been generated by transforming Vicmap Elevation digital elevation models (DEMs) into a quantized-mesh terrain tileset. The combined Vicmap elevation extent is embedded in ‘Cesium World Terrain’. These DEMs include ‘Vicmap Elevation DEM 10m’ which provides a base for state-wide coverage. Where available 1m DEMs have been embedded over the ‘Vicmap Elevation DEM 10m’ product.",
    url: "https://storage.googleapis.com/vic-datasets-public/85b71982-f5fe-4093-b4e4-fd2e50198fba/v2",
    name: "A Vic Terrain",
    id: "some-unique-id"
  }
})
export default class CesiumTerrainCatalogItemTraits extends mixTraits(
  UrlTraits,
  MappableTraits,
  CatalogMemberTraits
) {
  @primitiveTrait({
    name: "Ion Asset ID",
    type: "number",
    description: "The ID of the Cesium Ion Asset. If this is set url is ignored"
  })
  ionAssetId?: number;

  @primitiveTrait({
    name: "Ion Access Token",
    type: "string",
    description:
      "The Cesium Ion access token to use to access the terrain. If not specified, the token"
  })
  ionAccessToken?: string;

  @primitiveTrait({
    name: "Ion Server",
    type: "string",
    description:
      "the Cesium Ion access token to use to access the terrain. If not specified, the default Ion server, `https://api.cesium.com/`"
  })
  ionServer?: string;
}
